'''
〈문제〉 효율적인 화폐 구성: 문제 설명
• N가지 종류의 화폐가 있습니다. 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 합니다. 이때 각 종류의 화폐는 몇 개라도 사용할 수 있습니다.
• 예를 들어 2원, 3원 단위의 화폐가 있을 때는 15원을 만들기 위해 3원을 5개 사용하는 것이 가장 최소한 의 화폐 개수입니다.
• M원을 만들기 위한 최소한의 화폐 개수를 출력하는 프로그램을 작성하세요.

ai = 금액 i를 만들 수 있는 최소한의 화폐 개수
• k= 각 화폐의 단위
• 점화식: 각 화폐 단위인 k를 하나씩 확인하며 -> 이중포문 n*m의 시간복잡도
• ai-k를 만드는 방법이 존재하는 경우, ai= min(ai, ai-k + 1)
• ai-k를 만드는 방법이 존재하지 않는 경우, ai= INF

N= 3, M = 7이고, 각 화폐의 단위가 2, 3, 5인 경우 확인해 봅시다.
• Step 0 (초기화)
• 먼저 각 인덱스에 해당하는 값으로 INF(무한)의 값을 설정합니다.
• INF은 특정 금액을 만들 수 있는 화폐 구성이 가능하지 않다는 의미를 가집니다.
• 본 문제에서는 10,001을 사용할 수 있습니다. -> 무한대, 만들 수 없는 값으로 설정.
'''

n, m = map(int, input().split()) # 화폐 개수 n개, m원 만들기
array= []

# n개의 화폐단위 정보 입력
for i in range(n):
    array.append(int(input()))

d = [10001] * (m+1) # 10001은 무한대, 메모리제이션 (0원 ~ m원)
d[0] = 0 # 0원은 0개로 만들 수 있음, 초기화, 보텀업
for i in range(n): # i 화폐단위
    for j in range(array[i], m+1): # j 각각의 금액 단위
        if d[j - array[i]] != 10001: # i-k를 만드는 방법이 존재하는 경우
            d[j] = min(d[j], d[j - array[i]] + 1)

if d[m] == 10001:
    print(-1)
else:
    print(d[m])