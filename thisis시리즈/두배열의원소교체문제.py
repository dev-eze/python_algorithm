'''

첫 번째 줄에 N, K가 공백을 기준으로 구분되어 입력됩니다. (1 <=N <= 100.000.0 <=K <=N)
• 두 번째 줄에 배열 A의 원소들이 공백을 기준으로 구분되어 입력됩니다. 모든 원소는 10,000,000보 다 작은 자연수입니다.
• 세 번째 줄에 배열 B의 원소들이 공백을 기준으로 구분되어 입력됩니다. 모든 원소는 10,000,000보 다 작은 자연수입니다.
• 최대 K번의 바꿔치기 연산을 수행하여 만들 수 있는 배열 A의 모든 원소의 합의 최댓값을 출력합니다.

핵심 아이디어: 매번 배열 A에서 가장 작은 원소를 골라서, 배열 B에서 가장 큰 원소와 교체합니다.
• 가장 먼저 배열 A와 B가 주어지면 A에 대하여 오름차순 정렬하고, B에 대하여 내림차순 정렬합니다.
이후에 두 배열의 원소를 첫 번째 인덱스부터 차례로 확인하면서 A의 원소가 B의 원소보다 작을 때에만 교체를 수행합니다.
• 이 문제에서는 두 배열의 원소가 최대 100,000개까지 입력될 수 있으므로, 최악의 경우 O(NLogN)을 보 장하는 정렬 알고리즘을 이용해야 합니다.
'''

# n, k = map(int, input().split()) # 공백으로 구분하여 입력받기
# a = list(map(int, input().split())) # 공백으로 구분하여 입력받기
# b = list(map(int, input().split())) # 공백으로 구분하여 입력받기

def main(n, k, a, b):
    a.sort()
    b.sort(reverse=True)

# len 과 그냥 range쓰는건 무슨 차이가 있는거지?

    for i in range(len(a)):
        if a[i] < b[i] and k > 0:
            a[i], b[i] = b[i], a[i]
            k -= 1
        else:
            break

    return sum(a)

print(main(5, 3, [1,2,5,4,3], [5,5,6,6,5])) # 결과 출력
